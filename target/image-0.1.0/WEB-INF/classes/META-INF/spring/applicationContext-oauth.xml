<?xml version="1.0" encoding="UTF-8" ?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">
	<!--        <http entry-point-ref="oauthAuthenticationEntryPoint" xmlns="http://www.springframework.org/schema/security"
		access-decision-manager-ref="accessDecisionManager" pattern="/api/user/logout" >

	</http>-->

	<!--	<bean id="oauthAccessDeniedHandler"
		   class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"/>
 -->

	<!--	 Just for testing...
		<http pattern="/oauth/cache_approvals" security="none" xmlns="http://www.springframework.org/schema/security"/>
		<http pattern="/oauth/uncache_approvals" security="none" xmlns="http://www.springframework.org/schema/security"/>-->


	<!--	<http pattern="/oauth/token" create-session="never" authentication-manager-ref="clientAuthenticationManager"
		  entry-point-ref="oauthAuthenticationEntryPoint" xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY"/>
		<anonymous enabled="false"/>
		<http-basic entry-point-ref="oauthAuthenticationEntryPoint"/>

		<custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER"/>
		<access-denied-handler ref="oauthAccessDeniedHandler"/>
	</http>-->


	<!--
	<bean id="sessionAuthenticationStrategy"
		  class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
		<constructor-arg name="sessionRegistry" ref="sessionRegistry"/>
		<property name="maximumSessions" value="1"/>
	</bean>-->


	<!--	<bean id="clientCredentialsTokenEndpointFilter"
		  class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager"/>
	</bean>-->

	<!--	<authentication-manager alias="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="clientDetailsUserService"/>
	</authentication-manager>-->

	<!--	<bean id="clientDetailsUserService"
		  class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails"/>
	</bean>

	<bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl"/>

	<bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore"/>

	<bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.RandomValueTokenServices">
		<property name="tokenStore" ref="tokenStore"/>
		<property name="supportRefreshToken" value="true"/>
	</bean>

	<bean id="userApprovalHandler" class="com.silkstreamream.platform.security.SparklrUserApprovalHandler">
		<property name="autoApproveClients">
			<set>
				<value>my-less-trusted-autoapprove-client</value>
			</set>
		</property>
		<property name="tokenServices" ref="tokenServices"/>
	</bean>

	<oauth:authorization-server client-details-service-ref="clientDetails" token-services-ref="tokenServices"
								user-approval-handler-ref="userApprovalHandler">
		<oauth:authorization-code/>
		<oauth:implicit/>
		<oauth:refresh-token/>
		<oauth:client-credentials/>
		<oauth:password/>
	</oauth:authorization-server>

	<oauth:resource-server id="resourceServerFilter" resource-id="sparklr" token-services-ref="tokenServices"/>

	<oauth:client-details-service id="clientDetails">
		<oauth:client client-id="my-trusted-client"
					  authorized-grant-types="password,authorization_code,refresh_token,implicit"
					  authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" scope="read,write,trust"/>
		<oauth:client client-id="my-trusted-client-with-secret"
					  authorized-grant-types="password,authorization_code,refresh_token,implicit"
					  secret="somesecret" authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT"/>
		<oauth:client client-id="my-less-trusted-client" authorized-grant-types="authorization_code,implicit"
					  authorities="ROLE_CLIENT"/>
		<oauth:client client-id="my-less-trusted-autoapprove-client" authorized-grant-types="implicit"
					  authorities="ROLE_CLIENT"/>
		<oauth:client client-id="my-client-with-registered-redirect"
					  authorized-grant-types="authorization_code,client_credentials"
					  authorities="ROLE_CLIENT" redirect-uri="http://anywhere?key=value" scope="read,trust"/>
		<oauth:client client-id="my-untrusted-client-with-registered-redirect"
					  authorized-grant-types="authorization_code"
					  authorities="ROLE_CLIENT" redirect-uri="http://anywhere" scope="read"/>
		<oauth:client client-id="tonr" resource-ids="sparklr" authorized-grant-types="authorization_code,implicit"
					  authorities="ROLE_CLIENT" scope="read,write" secret="secret"/>
		<oauth:client client-id="tom" authorized-grant-types="authorization_code,implicit"
					  authorities="ROLE_CLIENT" scope="read,write,trust"/>
	</oauth:client-details-service>-->
	<!--	<sec:global-method-security secured-annotations="enabled" proxy-target-class="true">
			<sec:expression-handler ref="oauthExpressionHandler"/>
		</sec:global-method-security>

		<oauth:expression-handler id="oauthExpressionHandler"/>

		<oauth:web-expression-handler id="oauthWebExpressionHandler"/>-->


</beans>